{"version":3,"sources":["assets/residekc_logo.svg","registerServiceWorker.js","components/SearchBox.js","components/TrashDay.js","components/Officials.js","components/ParkMaps.js","components/RenderInfo.js","components/RenderSearch.js","index.js"],"names":["module","exports","__webpack_require__","p","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","searchOptions","bounds","google","maps","LatLngBounds","LatLng","strictBounds","SearchBar","address","_this","props","handleSelect","setState","setAddress","handleChange","react_default","a","createElement","className","dist_default","value","this","onChange","onSelect","_ref","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","map","suggestion","active","description","React","Component","TrashDay","trashDay","trashProvider","bulkyItems","Officials","offices","officials","list","stateRenderedList","office","i","key","name","width","alt","src","photoUrl","federalRenderedList","ParkMap","longitude","latitude","title","height","frameBorder","style","border","RenderInfo","displayInfo","handleClick","term","_this2","SearchBox","ButtonGroup","Button","onClick","components_TrashDay","trashInfo","components_Officials","ParkMaps","RenderSearch","onSubmit","handleSubmit","App","gotData","councilDistrict","kivaPIN","addressString","String","addressArray","split","isNaN","alert","toLowerCase","includes","parsedAddress","updateInfo","kcDataSubmit","editedAddress","regenerator_default","async","_context2","prev","next","replace","awrap","axios","get","response","myResponse","myLat","myLong","kivaSTRING","returnValue","_context","data","sent","t0","t1","city_id","t2","kcMapsSubmit","abrupt","stop","kivaJSON","_context3","mySubResponse","feature","attributes","TRASHDAY","TRASHPROVIDER","BULKYDAY","googleCivicSubmit","buildString","_response$data","splice","sentAddress","_context4","logo","components_RenderInfo","electedState","electedFeds","components_RenderSearch","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e8f8eb49.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/residekc_logo.9602df15.svg\";","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PlacesAutocomplete from 'react-places-autocomplete';\r\n\r\n\r\nconst bounds = new window.google.maps.LatLngBounds(\r\n  new window.google.maps.LatLng(54.69726685890506, -2.7379201682812226),\r\n  new window.google.maps.LatLng(55.38942944437183, -1.2456105979687226)\r\n)\r\nconst searchOptions = {\r\n  bounds,\r\n  strictBounds: true\r\n}\r\n\r\nclass SearchBar extends React.Component {\r\n  state = {\r\n    address: this.props.address ? this.props.address : '',\r\n    searchOptions\r\n  }\r\n\r\n  handleSelect = address => {\r\n    this.setState({ address });\r\n    this.props.setAddress(address);\r\n  }\r\n\r\n  handleChange = address => {\r\n    this.setState({ address })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"searchbox\">\r\n        <PlacesAutocomplete\r\n        value={this.state.address}\r\n        onChange={this.handleChange}\r\n        onSelect={this.handleSelect}\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n          <div>\r\n            <input\r\n              {...getInputProps({\r\n                placeholder: 'Search Places ...',\r\n                className: 'location-search-input',\r\n              })}\r\n            />\r\n            <div className=\"autocomplete-dropdown-container\">\r\n              {loading && <div>Loading...</div>}\r\n              {suggestions.map(suggestion => {\r\n                const className = suggestion.active\r\n                  ? 'suggestion-item--active'\r\n                  : 'suggestion-item';\r\n                return (\r\n                  <div\r\n                    {...getSuggestionItemProps(suggestion, {\r\n                      className\r\n                    })}\r\n                  >\r\n                    <span>{suggestion.description}</span>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </PlacesAutocomplete>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\n\r\nconst TrashDay = ({trashDay, trashProvider, bulkyItems}) =>  {\r\n    return (\r\n        <div className=\"trashDay\">\r\n            <h1>Your trash infomation</h1>\r\n            <p>You trash will be picked up on <strong>{trashDay}</strong> by Provider: <strong>{trashProvider}</strong></p>\r\n            <p>Any bulky items will be picked up on the <strong>{bulkyItems}</strong> of the month.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TrashDay;","import React from 'react';\r\n\r\n\r\nconst Officials = ({ offices, officials ,list }) => {\r\n    const defaultImage = 'https://via.placeholder.com/150';\r\n\r\n    \r\n    const stateRenderedList = offices.map((office,i) => {\r\n        if (i >= 3) {\r\n            return (\r\n                <div key={officials[i].name}> \r\n                    <img width=\"150\" alt={officials[i].name} src={officials[i].photoUrl ? officials[i].photoUrl : defaultImage } />\r\n                    <p><strong>{office.name}</strong></p>\r\n                    <p>{officials[i].name}</p>\r\n                </div>\r\n            )\r\n        }     \r\n        return null;\r\n    })\r\n\r\n    const federalRenderedList = offices.map((office,i) => {\r\n        if (i < 3) {\r\n            return (\r\n                <div key={officials[i].name}> \r\n                    <img width=\"150\" alt={officials[i].name} src={officials[i].photoUrl ? officials[i].photoUrl : defaultImage } />\r\n                    <p><strong>{office.name}</strong></p>\r\n                    <p>{officials[i].name}</p>\r\n                </div>\r\n            )\r\n        }\r\n        return null;\r\n    })\r\n\r\n\r\n    if (list === \"stateList\") {\r\n        return <div className=\"ui relaxed divided list\">{stateRenderedList}</div>\r\n    } else {\r\n        return <div className=\"ui relaxed divided list\">{federalRenderedList}</div>\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Officials;","import React from 'react';\r\n\r\n//The Longitude and latitude displayed here are in the current form unnecessary. Explained below why I decided to keep them in.\r\nconst ParkMap = ({longitude, latitude}) =>  {\r\n    console.log(\"lat is \" + latitude);\r\n    console.log(\"long is \" + longitude);\r\n\r\n    \r\n    \r\n    //**********These are the versions that would ideally work. please see below */\r\n    //This gives you the parks but not the local\r\n    //let srcString = `http://maps.google.com/maps?q=${latitude}, ${longitude}&z=14&q=parks+in+kansas+city&output=embed`;\r\n    //This gives you the local but not the parks\r\n    //let srcString = `http://maps.google.com/maps?q=parks+in+kansas+city&q=${latitude}, ${longitude}&z=14&output=embed`;\r\n    //The order of the q=parks... and the lat and long determine result\r\n\r\n    //Here is the one I worked out for the time being JS\r\n    let srcString = `https://maps.google.com/maps?q=parks+in+kansas+city&z=11&output=embed`;\r\n\r\n    return (\r\n        <div className=\"trashDay\">\r\n            <iframe src={srcString} title=\"maps\" width=\"600\" height=\"450\" frameBorder=\"0\" style={{border:0}}>\r\n            </iframe>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Notes\r\n//the initial concept of this component was to create something that would take the input address and\r\n//show a local map centered on that location, pinned, with all kc parks also pinned (potentially different color)\r\n//As it progressed, it became clear that an inbedded iframe was currently unable to show such information\r\n//without using a google API. As google will want a price for extensive api usage, and with the new potential\r\n//code only having a marginal improvement, I (JS) made the decision to make the map city wide and have no pin\r\n//on the users location. I have leaving the code that could make this theorectical possible so that if someone\r\n//comes along and wants to do it, they have the easiest route.\r\n\r\n//Also, there is a lot of content security policy alerts when you load this. Time permitting I will go back\r\n//and attempt to fix it.\r\nexport default ParkMap;","import React from 'react';\r\nimport SearchBox from './SearchBox';\r\nimport { Button, ButtonGroup } from 'reactstrap';  \r\nimport Trashday from './TrashDay';\r\nimport Officials from './Officials';\r\nimport ParkMap from './ParkMaps';\r\n\r\nclass RenderInfo extends React.Component {\r\n    state = {\r\n        displayInfo: 'trash'\r\n    }\r\n\r\n    handleClick = (term) => {\r\n        this.setState({ displayInfo: term })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <SearchBox setAddress={this.props.setAddress} address={this.props.address} />\r\n\r\n                <ButtonGroup>\r\n                    <Button onClick={() => {this.handleClick('trash')}} >Trash</Button>\r\n                    <Button onClick={() => {this.handleClick('stateGovernment')}}>State Officials</Button>\r\n                    <Button onClick={() => {this.handleClick('federalGovernment')}} >Federal Legislative Officials</Button>\r\n                    <Button onClick={() => {this.handleClick('parkMap')}}>Park Map</Button>\r\n                </ButtonGroup>\r\n\r\n                {this.state.displayInfo === \"trash\" && <Trashday bulkyItems={this.props.trashInfo.bulkyItems} trashProvider={this.props.trashInfo.trashProvider} trashDay={this.props.trashInfo.trashDay} />} \r\n\r\n                {this.state.displayInfo === \"stateGovernment\" && <Officials list=\"stateList\" offices={this.props.offices} officials={this.props.officials}/>}\r\n\r\n                {this.state.displayInfo === \"federalGovernment\" && <Officials list=\"federalList\" offices={this.props.offices} officials={this.props.officials}/>}\r\n            \r\n                {this.state.displayInfo === \"parkMap\" && <ParkMap latitude={this.props.latitude} longitude={this.props.longitude}/>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RenderInfo;\r\n\r\n\r\n/* <div>\r\n                <SearchBox setAddress={this.props.setAddress} address={this.props.address} />\r\n\r\n                <ButtonGroup>\r\n                    <Button onClick={() => {this.handleClick('trash')}} >Trash</Button>\r\n                    <Button onClick={() => {this.handleClick('stateGovernment')}}>State Officials</Button>\r\n                    <Button onClick={() => {this.handleClick('federalGovernment')}} >Federal Legislative Officials</Button>\r\n                    <Button onClick={() => {this.handleClick('parkMap')}}>Park Map</Button>\r\n                </ButtonGroup>\r\n\r\n                {this.state.displayInfo === \"trash\" && <Trashday bulkyItems={this.props.trashInfo.bulkyItems} trashProvider={this.props.trashInfo.trashProvider} trashDay={this.props.trashInfo.trashDay} />} \r\n\r\n                {this.state.displayInfo === \"stateGovernment\" && <Officials list=\"stateList\" offices={this.props.offices} officials={this.props.officials}/>}\r\n\r\n                {this.state.displayInfo === \"federalGovernment\" && <Officials list=\"federalList\" offices={this.props.offices} officials={this.props.officials}/>}\r\n\r\n                {this.state.displayInfo === \"parkMap\" && <ParkMap/>}\r\n            </div> */","import React from 'react';\r\nimport SearchBox from './SearchBox';\r\n\r\nconst RenderSearch = (props) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <label>Search and click on your address below.</label>    \r\n                <SearchBox setAddress={props.setAddress} />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RenderSearch;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './scss/base.scss';\r\nimport axios from 'axios';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport RenderInfo from './components/RenderInfo';\r\nimport RenderSearch from './components/RenderSearch';\r\nimport logo from './assets/residekc_logo.svg'\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        gotData: false,\r\n        councilDistrict: '',\r\n        kivaPIN: '',\r\n        address: '',\r\n        trashInfo: {\r\n            trashDay: '',\r\n            trashProvider: '',\r\n            bulkyItems: ''\r\n        },\r\n        offices: [],\r\n        officials: [],\r\n        latitude: '',\r\n        longitude: ''       \r\n    }\r\n        \r\n\r\n    // Take address, parse, set state and submit adress, check if address is valid, start in Searchbox.js\r\n    setAddress = address => {\r\n        const addressString = String(address);\r\n\r\n        // Checks to see if first char in string is a number\r\n        let addressArray = String(address).split(\"\");\r\n        if (isNaN(addressArray[0])) { alert(\"Please choose an address that has a numerical address\"); };\r\n\r\n\r\n        /**\r\n         * Checks whether addressString contains both \"kansas city\" && \"mo\" before query.\r\n         * Converts to lower case before check to avoid false error alerts when capitalization is nonstandard.\r\n         */\r\n        if (!(addressString.toLowerCase().includes(\"kansas city\")) || !(addressString.toLowerCase().includes(\"mo\"))) {\r\n            //Address does not contain both 'kansas city' && 'mo'\r\n            alert(\"Please choose another address\")\r\n        } else {\r\n            const parsedAddress = addressString.split(',')[0];\r\n            this.setState({ address: parsedAddress });\r\n            this.handleSubmit(parsedAddress);  //submitting ie: 2515 Holmes Street\r\n        }\r\n    }\r\n\r\n    updateInfo = (trashDay, trashProvider, bulkyItems) => {\r\n        this.setState({\r\n            gotData: true,\r\n            trashInfo: {\r\n                trashDay: trashDay,\r\n                trashProvider: trashProvider,\r\n                bulkyItems: bulkyItems\r\n            },\r\n        })\r\n    }\r\n\r\n    // Submit Address to KC Data API\r\n    kcDataSubmit = async address => {\r\n        //Below is the line of code that had been working. It stopped working, so we went to the second grouping of line of code\r\n        //await axios.get(`https://dev-api.codeforkc.org//address-attributes/V0/${address}?city=Kansas%20City&state=mo`)\r\n        //Below this line is the testing I am going to see to try and integrate everything\r\n        let editedAddress = address.replace(/ /g, \"%20\");\r\n        await axios.get('http://dev-api.codeforkc.org//address-attributes/V0/' + editedAddress + '?city=Kansas%20City&state=MO')\r\n        //Below this is the line of code suggest by Paul\r\n        //await axios.get( 'http://dev-api.codeforkc.org/address-attributes/V0/7401%20MAIN%20ST?city=Kansas%20City&state=MO')\r\n        .then( async response => {\r\n            let myResponse = await response.data;\r\n            let myLat = myResponse.data.latitude, myLong = myResponse.data.longitude;\r\n            console.log(myResponse.data);\r\n            console.log (myLat, myLong);\r\n            this.setState({latitude: myResponse.data.latitude, longitude: myResponse.data.longitude});\r\n            let kivaSTRING = await \"https://maps.kcmo.org/kcgis/rest/services/ParcelGeocodes/MapServer/1/\" + myResponse.data.city_id + \"?f=json&pretty=true\";\r\n            const returnValue = await this.kcMapsSubmit(kivaSTRING);\r\n            return returnValue\r\n        })\r\n        .catch( error => {\r\n            console.log(error);\r\n        });\r\n    };\r\n\r\n    // Submit to KCMO Maps\r\n    kcMapsSubmit = async kivaJSON => {\r\n        axios.get(kivaJSON).then((response) => {\r\n            let mySubResponse = response.data;\r\n            let trashDay = mySubResponse.feature.attributes.TRASHDAY;\r\n            let trashProvider =  mySubResponse.feature.attributes.TRASHPROVIDER;\r\n            let bulkyItems = mySubResponse.feature.attributes.BULKYDAY;\r\n            this.updateInfo(trashDay, trashProvider, bulkyItems);\r\n        })\r\n        .catch((error) => { // if no address/KIVA is found\r\n            this.setState({ gotData: false });\r\n            console.log(error);\r\n            alert(\"Please make sure the address you are entering is in the Kansas City area and not in a surrounding area like North Kansas City or Liberty.\");\r\n        });\r\n    }\r\n\r\n    // Google Civic Info API\r\n    googleCivicSubmit = address => {\r\n        let buildString = \"https://www.googleapis.com/civicinfo/v2/representatives?address=\" + address + \"%2C%20Kansas%20City%2C%20MO&key=AIzaSyANGMualu3HzRARJIsPuLM0vHbIxAHVQpE\";\r\n        axios.get(buildString).then((response) => {\r\n            let { offices, officials } = response.data;\r\n            offices.splice(3,0,{name: 'United States Sentate'});\r\n            offices.splice(0,2);\r\n            officials.splice(0,2);\r\n            this.setState({ \r\n                offices,\r\n                officials\r\n            });\r\n        })\r\n        .catch((error) => { \r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n\r\n    //  Submits address to APIs\r\n    handleSubmit =  async address => {\r\n        //This worked for a while but right now testing the old way as the new way isn't working right now\r\n        //New way\r\n        //let sentAddress =  await `${address}?city=Kansas%20City&state=mo`;\r\n        //Old Way\r\n        let sentAddress = address;\r\n        //Update: Old way works. leaving new code commented out for posterity\r\n        await this.kcDataSubmit(sentAddress);\r\n        await this.googleCivicSubmit(sentAddress);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <img src={logo} alt=\"ResideKC\" className='logo' />\r\n\r\n                { this.state.gotData ? <RenderInfo trashInfo={this.state.trashInfo} displayInfo={this.displayInfo} setAddress={this.setAddress} address={this.state.address} electedState={this.state.electedState}  electedFeds={this.state.electedFeds} offices={this.state.offices} officials={this.state.officials} latitude={this.state.latitude} longitude={this.state.longitude}/> :  <RenderSearch handleSubmit={this.handleSubmit} setAddress={this.setAddress}/> }\r\n\r\n            </div>\r\n        ) \r\n    }\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}